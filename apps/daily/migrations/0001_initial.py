# Generated by Django 5.2.5 on 2025-08-30 20:53

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bot', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Question title', max_length=255)),
                ('order', models.PositiveIntegerField(help_text='Order in which the question should be asked')),
                ('is_active', models.BooleanField(default=True, help_text='Is this question active?')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Standup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_time', models.TimeField(help_text='Time when standup starts (HH:MM)')),
                ('finish_time', models.TimeField(help_text='Time when standup finishes (HH:MM)')),
                ('schedule', models.IntegerField(default=0, help_text='Bitwise field for days of the week (will be implemented later)')),
                ('is_active', models.BooleanField(default=True, help_text='Is this standup schedule active?')),
            ],
            options={
                'verbose_name': 'Standup',
                'verbose_name_plural': 'Standups',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(help_text='When the standup session started')),
                ('finished_at', models.DateTimeField(blank=True, help_text='When the standup session finished', null=True)),
                ('discord_message_id', models.CharField(blank=True, help_text='Discord message ID for this session', max_length=20, null=True)),
                ('standup', models.ForeignKey(help_text='Standup this session belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.standup')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='StandupQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(blank=True, help_text='Order of this question within the standup (uses question order if not set)', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this question active in this standup?')),
                ('question', models.ForeignKey(help_text='Question included in this standup', on_delete=django.db.models.deletion.CASCADE, to='daily.question')),
                ('standup', models.ForeignKey(help_text='Standup this question belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.standup')),
            ],
            options={
                'verbose_name': 'Standup Question',
                'verbose_name_plural': 'Standup Questions',
                'ordering': ['standup', 'order'],
                'unique_together': {('standup', 'question')},
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Team name', max_length=255)),
                ('discord_channel_id', models.CharField(help_text='Discord channel ID where bot will send messages', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Should daily bot be active for this team?')),
                ('server', models.ForeignKey(help_text='Discord server this team belongs to', on_delete=django.db.models.deletion.CASCADE, to='bot.server')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'unique_together': {('server', 'name')},
            },
        ),
        migrations.AddField(
            model_name='standup',
            name='team',
            field=models.ForeignKey(help_text='Team this standup belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.team'),
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discord_user_id', models.CharField(help_text='Discord user ID', max_length=20)),
                ('name', models.CharField(help_text='Member name', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Is this member active in the team?')),
                ('team', models.ForeignKey(help_text='Team this member belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.team')),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'unique_together': {('team', 'discord_user_id')},
            },
        ),
        migrations.CreateModel(
            name='SessionMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finished_at', models.DateTimeField(blank=True, help_text='When this member finished their standup', null=True)),
                ('discord_message_id', models.CharField(blank=True, help_text='Discord message ID for this session member', max_length=20, null=True)),
                ('session', models.ForeignKey(help_text='Session this member participation belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.session')),
                ('team_member', models.ForeignKey(help_text='Team member participating in this session', on_delete=django.db.models.deletion.CASCADE, to='daily.teammember')),
            ],
            options={
                'verbose_name': 'Session Member',
                'verbose_name_plural': 'Session Members',
                'ordering': ['session', 'team_member'],
                'unique_together': {('session', 'team_member')},
            },
        ),
        migrations.CreateModel(
            name='SessionMemberAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.TextField(help_text='Answer content')),
                ('session_member', models.ForeignKey(help_text='Session member this answer belongs to', on_delete=django.db.models.deletion.CASCADE, to='daily.sessionmember')),
                ('standup_question', models.ForeignKey(help_text='Standup question being answered', on_delete=django.db.models.deletion.CASCADE, to='daily.standupquestion')),
            ],
            options={
                'verbose_name': 'Session Member Answer',
                'verbose_name_plural': 'Session Member Answers',
                'ordering': ['session_member', 'standup_question'],
                'unique_together': {('session_member', 'standup_question')},
            },
        ),
    ]
